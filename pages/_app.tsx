/* eslint-disable react-hooks/exhaustive-deps */
// import type { AppProps } from 'next/app';
// import { ReactElement, ReactNode, Suspense, useEffect, useState } from 'react';
// import DefaultLayout from '../components/Layouts/DefaultLayout';
// import { Provider } from 'react-redux';
// import store from '../store/index';
// import Head from 'next/head';
// import { appWithI18Next } from 'ni18n';
// import { ni18nConfig } from 'ni18n.config.ts';
// import { ImageProvider } from '../components/ImageContext';
// import { ColorProvider } from '../components/ColorContext';

// // Perfect Scrollbar
// import 'react-perfect-scrollbar/dist/css/styles.css';

// import '../styles/tailwind.css';
// import '../styles/contact.css';

// import { NextPage } from 'next';
// import { setPageTitle } from '@/store/themeConfigSlice';
// import router from 'next/router';

// export type NextPageWithLayout<P = {}, IP = P> = NextPage<P, IP> & {
//     getLayout?: (page: ReactElement) => ReactNode;
// };

// type AppPropsWithLayout = AppProps & {
//     Component: NextPageWithLayout;
// };

// const App = ({ Component, pageProps }: AppPropsWithLayout) => {
//     const getLayout = Component.getLayout ?? ((page) => <DefaultLayout>{page}</DefaultLayout>);
//     const [isLoggedIn, setIsLoggedIn] = useState(false);

//     useEffect(() => {
//         // Check if the user is authenticated

//         const isLoggedIn = localStorage.getItem('isLoggedIn');

//         if (!isLoggedIn) {
//             // Redirect to the login page if not authenticated
//             router.replace('/Login');
//         }
//     }, []);

//     return (
//         <Provider store={store}>
//             <ImageProvider>
//                 <Head>
//                     <title>Tapect</title>
//                     <meta charSet="UTF-8" />
//                     <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
//                     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
//                     <meta name="description" content="Generated by create next app" />
//                     <link rel="icon" href="./TAPECTFAVICON.svg" />
//                 </Head>
//                 {getLayout(<Component {...pageProps} />)}
//             </ImageProvider>
//         </Provider>
//     );
// };
// export default appWithI18Next(App, ni18nConfig);
import type { AppProps } from 'next/app';
import { ReactElement, ReactNode, useEffect } from 'react';
import DefaultLayout from '../components/Layouts/DefaultLayout';
import BlankLayout from '../components/Layouts/BlankLayout'; // Import BlankLayout
import { Provider } from 'react-redux';
import store from '../store/index';
import Head from 'next/head';
import { appWithI18Next } from 'ni18n';
import { ni18nConfig } from 'ni18n.config.ts';
import { ImageProvider } from '../components/ImageContext';
import { useRouter } from 'next/router';

// Perfect Scrollbar
import 'react-perfect-scrollbar/dist/css/styles.css';

import '../styles/tailwind.css';

import '../styles/contact.css';

import { NextPage } from 'next';
import { setPageTitle } from '@/store/themeConfigSlice';

export type NextPageWithLayout<P = {}, IP = P> = NextPage<P, IP> & {
    getLayout?: (page: ReactElement) => ReactNode;
};

type AppPropsWithLayout = AppProps & {
    Component: NextPageWithLayout;
};

const App = ({ Component, pageProps }: AppPropsWithLayout) => {
    const router = useRouter();
    const getLayout = Component.getLayout ?? ((page) => <DefaultLayout>{page}</DefaultLayout>);

    useEffect(() => {
        // Check if the user is authenticated
        const isLoggedIn = localStorage.getItem('isLoggedIn');

        if (!isLoggedIn && isProtectedRoute(router.pathname)) {
            // Redirect to the login page if not authenticated and trying to access a protected route
            router.replace('/Login');
        }
    }, [router.pathname]);

    // Function to determine if a route is protected
    const isProtectedRoute = (pathname: string) => {
        const protectedRoutes = ['/home', '/profile', '/analytics', '/contact'];
        return protectedRoutes.includes(pathname.toLowerCase());
    };

    const isPublicRoute = (pathname: string) => {
        const publicRoutes = ['/Login', '/signup', '/ViewCard'];
        return publicRoutes.includes(pathname.toLowerCase());
      };


    // Render the appropriate layout based on whether the route is public or protected
    const renderLayout = () => {
        if (isPublicRoute(router.pathname)) {
            return <BlankLayout>{getLayout(<Component {...pageProps} />)}</BlankLayout>;
        } else {
            return getLayout(<Component {...pageProps} />);
        }
    };

    return (
        <Provider store={store}>
            <ImageProvider>
                <Head>
                    <title>Tapect</title>
                    <meta charSet="UTF-8" />
                    <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
                    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="./TAPECTFAVICON.svg" />
                </Head>
                {renderLayout()}
            </ImageProvider>
        </Provider>
    );
};
export default appWithI18Next(App, ni18nConfig);
